name: Test and Analyze with Triggers and SonarCloud
description: Run node tests based on triggers, optional SonarCloud
branding:
  icon: check-square
  color: blue

inputs:
  ### Required
  commands:
    description: Commands to run tests, start with '|' for multi-line
    required: true

  dir:
    description: App/package directory
    required: true

  node_version:
    description: Node version to use
    required: true

  ### Typical / recommended
  cache:
    description: Package manager for caching; e.g. npm, yarn, pnpm
    default: npm

  sonar_args:
    # https://docs.sonarcloud.io/advanced-setup/analysis-parameters/
    description: SonarCloud command line arguments
    default: |
      -Dsonar.organization=bcgov-sonarcloud
      -Dsonar.projectKey=bcgov_${{ github.repository }}

  sonar_token:
    description: Sonar token, provide unpopulated token for pre-setup (will skip)

  triggers:
    description: Paths (array) used to trigger a build; e.g. ('./backend/' './frontend/)

  ### Usually a bad idea / not recommended
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}

  repository:
    description: Non-default repository to clone (used for testing this action)
    default: ${{ github.repository }}

  branch:
    description: Non-default branch to clone (used for testing this action)
    default: ""

outputs:
  triggered:
    description: Whether the action was triggered based on path changes
    value: ${{ steps.diff.outputs.triggered }}

runs:
  using: composite
  steps:
    - name: Input validation and warnings
      shell: bash
      run: |
        echo "🔍 Validating inputs..."
        
        # Check required inputs
        if [ -z "${{ inputs.commands }}" ]; then
          echo "❌ Error: 'commands' input is required"
          echo "   Please provide commands to run tests, e.g.:"
          echo "   commands: |"
          echo "     npm ci"
          echo "     npm run test:cov"
          exit 1
        fi

        if [ -z "${{ inputs.dir }}" ]; then
          echo "❌ Error: 'dir' input is required"
          echo "   Please provide the app/package directory, e.g.:"
          echo "   dir: frontend"
          exit 1
        fi

        if [ -z "${{ inputs.node_version }}" ]; then
          echo "❌ Error: 'node_version' input is required"
          echo "   Please provide a Node.js version, e.g.:"
          echo "   node_version: '20'"
          echo "   Previous default: 16"
          exit 1
        fi

        # Validate node_version format
        if ! echo "${{ inputs.node_version }}" | grep -E '^[0-9]+(\.[0-9]+)*$' > /dev/null; then
          echo "❌ Error: Invalid node_version format: '${{ inputs.node_version }}'"
          echo "   Please use a valid Node.js version, e.g.: '18', '20', '22'"
          exit 1
        fi

        # Validate cache input
        if [ -n "${{ inputs.cache }}" ] && ! echo "${{ inputs.cache }}" | grep -E '^(npm|yarn|pnpm)$' > /dev/null; then
          echo "❌ Warning: Unusual cache value: '${{ inputs.cache }}'"
          echo "   Supported values: npm, yarn, pnpm"
          echo "   Default: npm"
        fi

        # Check if directory exists
        if [ ! -d "${{ inputs.dir }}" ]; then
          echo "❌ Error: Directory '${{ inputs.dir }}' does not exist"
          echo "   Please check the 'dir' input value"
          echo "   Current working directory: $(pwd)"
          echo "   Available directories:"
          ls -la | grep '^d' | awk '{print "   - " $9}' | grep -v '^\.$\|^\.\.$' || echo "   (none found)"
          exit 1
        fi

        # Check for package.json in directory
        if [ ! -f "${{ inputs.dir }}/package.json" ]; then
          echo "❌ Error: No package.json found in '${{ inputs.dir }}'"
          echo "   Please ensure the directory contains a Node.js project"
          echo "   Expected file: ${{ inputs.dir }}/package.json"
          exit 1
        fi

        # Warnings for breaking changes
        if [ ! -z "${{ inputs.sonar_project_token }}" ]; then
          echo -e "\n⚠️  Breaking change: sonar_project_token renamed"
          echo -e "\n\tAction: rename sonar_project_token to sonar_token\n"
          exit 1
        fi

        if [ ! -z "${{ inputs.sonar_comment_token }}" ]; then
          echo -e "\n⚠️  Breaking change: sonar_comment_token deprecated"
          echo -e "\n\tAction: remove sonar_comment_token parameter\n"
          exit 1
        fi

        echo "✅ Input validation passed"

    # Send triggers to diff action, but only for pull requests
    - id: diff
      uses: bcgov/action-diff-triggers@0d193029efd26c76aeacaa84aba3328de8198370 # v0.2.0
      with:
        triggers: ${{ github.event_name == 'pull_request' && inputs.triggers || '' }}
        diff_branch: ${{ inputs.diff_branch }}

    # Shallow clone is faster, but SonarCloud requires a full clone
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch }}

    # Setup node and cache dir
    - uses: actions/setup-node@v5
      if: steps.diff.outputs.triggered == 'true'
      with:
        node-version: ${{ inputs.node_version }}
        cache: ${{ inputs.cache }}
        cache-dependency-path: ${{ inputs.dir }}/package-lock.json

    # Run tests, hopefully generating coverage for SonarCloud
    - if: steps.diff.outputs.triggered == 'true'
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        echo "🚀 Running test commands in ${{ inputs.dir }}..."
        echo "Commands: ${{ inputs.commands }}"
        
        # Run Tests with error handling
        if ! ${{ inputs.commands }}; then
          echo ""
          echo "❌ Test commands failed!"
          echo ""
          echo "🔧 Common troubleshooting steps:"
          echo "   1. Check if package.json exists and has test scripts"
          echo "   2. Verify all dependencies are installed (npm ci)"
          echo "   3. Check if test files exist and are properly configured"
          echo "   4. Ensure Node.js version compatibility"
          echo ""
          echo "📋 Debug information:"
          echo "   - Working directory: $(pwd)"
          echo "   - Node version: $(node --version)"
          echo "   - NPM version: $(npm --version)"
          echo "   - Available scripts:"
          if [ -f package.json ]; then
            npm run 2>/dev/null | grep -E '^  [a-z]' | head -10 || echo "   (no scripts found)"
          else
            echo "   (no package.json found)"
          fi
          echo ""
          exit 1
        fi
        
        echo "✅ Test commands completed successfully"

    ### Optional SonarCloud

    # If sonar_token
    - if: inputs.sonar_token && steps.diff.outputs.triggered == 'true'
      uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5.3.1
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
      with:
        projectBaseDir: ${{ inputs.dir }}
        args: >
          ${{ inputs.sonar_args }}

    ### Cleanup

    # Fix - Docker can take file ownership, causing a cleanup fail
    - shell: bash
      if: steps.diff.outputs.triggered == 'true'
      id: get_uid
      run: |
        # User for workstation ownership reset/fix
        echo "uid=$(id -u ${USER})" >> $GITHUB_OUTPUT
    - uses: peter-murray/reset-workspace-ownership-action@3c5cbcf2e4aeecb506b3e6bc867e0955dab8dfe0 # v1
      if: steps.diff.outputs.triggered == 'true'
      with:
        user_id: ${{ steps.get_uid.outputs.uid }}

    # Fix - Clone for action.yml and other verifications
    - name: Checkout Action repo to pass tests
      if: always() && inputs.repository != github.repository
      uses: actions/checkout@v5
